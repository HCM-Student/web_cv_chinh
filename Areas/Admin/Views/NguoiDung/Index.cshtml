@model IEnumerable<WEB_CV.Models.NguoiDung>

@{
    ViewData["Title"] = "Quản lý Người dùng";
}

<script>
// EMERGENCY FIX - Run immediately to remove black screen
(function() {
    // Remove all modal backdrops immediately
    const backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(backdrop => {
        backdrop.remove();
        backdrop.style.display = 'none';
        backdrop.style.visibility = 'hidden';
    });
    
    // Remove modal-open class from body
    document.body.classList.remove('modal-open');
    
    // Reset body styles
    document.body.style.paddingRight = '';
    document.body.style.overflow = 'auto';
    document.body.style.position = 'static';
    
    // Force remove any blocking elements
    const blockingElements = document.querySelectorAll('[style*="position: fixed"][style*="z-index"]');
    blockingElements.forEach(el => {
        if (el.style.zIndex > 1000) {
            el.remove();
        }
    });
})();
</script>

<div class="admin-page">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Header Section -->
    <div class="page-header mb-4">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="page-title">
                    <i class="fas fa-users text-primary me-2"></i>
                    Quản lý Người dùng
                </h1>
                <p class="page-subtitle text-muted">Quản lý tài khoản và quyền hạn người dùng</p>
            </div>
            <div class="btn-group">
                <a class="btn btn-primary btn-lg" asp-action="Create">
                    <i class="fas fa-plus me-2"></i>Thêm người dùng
                </a>
                <button class="btn btn-warning btn-lg" onclick="cleanupUsers()">
                    <i class="fas fa-broom me-2"></i>Dọn dẹp tài khoản
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <div class="stat-card">
                <div class="stat-icon bg-primary">
                    <i class="fas fa-users"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count()</h3>
                    <p class="stat-label">Tổng người dùng</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card">
                <div class="stat-icon bg-success">
                    <i class="fas fa-user-check"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count(u => u.KichHoat == true)</h3>
                    <p class="stat-label">Đang hoạt động</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card">
                <div class="stat-icon bg-warning">
                    <i class="fas fa-crown"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count(u => u.VaiTro == "Admin")</h3>
                    <p class="stat-label">Quản trị viên</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card">
                <div class="stat-icon bg-info">
                    <i class="fas fa-user"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count(u => u.VaiTro == "User")</h3>
                    <p class="stat-label">Người dùng</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card">
                <div class="stat-icon bg-success">
                    <i class="fas fa-user-tie"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count(u => u.VaiTro == "Staff")</h3>
                    <p class="stat-label">Cán bộ nhân viên</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="form-group">
                        <label class="form-label">Tìm kiếm</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" placeholder="Tìm theo tên, email..." id="searchInput">
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="form-label">Vai trò</label>
                        <select class="form-select" id="roleFilter">
                            <option value="">Tất cả</option>
                            <option value="Admin">Quản trị viên</option>
                            <option value="User">Người dùng</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="form-label">Trạng thái</label>
                        <select class="form-select" id="statusFilter">
                            <option value="">Tất cả</option>
                            <option value="true">Hoạt động</option>
                            <option value="false">Tạm khóa</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group">
                        <label class="form-label">&nbsp;</label>
                        <button class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                            <i class="fas fa-times me-2"></i>Xóa bộ lọc
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">
                <i class="fas fa-list me-2"></i>Danh sách người dùng
            </h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="usersTable">
                    <thead class="table-light">
                        <tr>
                            <th><i class="fas fa-hashtag me-1"></i>ID</th>
                            <th><i class="fas fa-user me-1"></i>Họ tên</th>
                            <th><i class="fas fa-envelope me-1"></i>Email</th>
                            <th><i class="fas fa-shield-alt me-1"></i>Vai trò</th>
                            <th><i class="fas fa-calendar me-1"></i>Ngày tạo</th>
                            <th><i class="fas fa-toggle-on me-1"></i>Trạng thái</th>
                            <th class="text-center"><i class="fas fa-cogs me-1"></i>Thao tác</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ int nguoiDungIndex = 1; }
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    <span class="badge bg-light text-dark">#@nguoiDungIndex</span>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="avatar me-2">
                                            @if (!string.IsNullOrEmpty(item.Avatar))
                                            {
                                                <img src="@item.Avatar" alt="Avatar" class="avatar-img">
                                            }
                                            else
                                            {
                                                <i class="fas fa-user-circle text-muted"></i>
                                            }
                                        </div>
                                        <div>
                                            <strong>@item.HoTen</strong>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="text-muted">@item.Email</span>
                                </td>
                                <td>
                                    @if (item.VaiTro == "Admin")
                                    {
                                        <span class="badge bg-warning">
                                            <i class="fas fa-crown me-1"></i>Quản trị viên
                                        </span>
                                    }
                                    else if (item.VaiTro == "Staff")
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-user-tie me-1"></i>Cán bộ nhân viên
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-info">
                                            <i class="fas fa-user me-1"></i>Người dùng
                                        </span>
                                    }
                                </td>
                                <td>
                                    <small class="text-muted">@item.NgayTao.ToString("dd/MM/yyyy")</small>
                                </td>
                                <td>
                                    @if (item.KichHoat == true)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-check-circle me-1"></i>Hoạt động
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">
                                            <i class="fas fa-ban me-1"></i>Tạm khóa
                                        </span>
                                    }
                                </td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <a class="btn btn-sm btn-outline-info" asp-action="ViewProfile" asp-route-id="@item.Id" title="Xem Profile">
                                            <i class="fas fa-user-circle"></i>
                                        </a>
                                        <a class="btn btn-sm btn-outline-primary" asp-action="Edit" asp-route-id="@item.Id" title="Chỉnh sửa">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        @if (item.VaiTro != "Admin")
                                        {
                                            <button class="btn btn-sm btn-outline-danger" onclick="confirmDelete(@item.Id, '@item.HoTen')" title="Xóa tài khoản">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-secondary" disabled title="Không thể xóa Admin">
                                                <i class="fas fa-shield-alt"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                            nguoiDungIndex++;
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>Xác nhận xóa
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn xóa tài khoản <strong id="userNameToDelete"></strong>?</p>
                <p class="text-danger small">Hành động này không thể hoàn tác!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa tài khoản</button>
            </div>
        </div>
    </div>
</div>

<style>
.admin-page {
    padding: 1.5rem;
    background: #f8f9fa;
    min-height: 100vh;
    max-width: 100%;
}

/* Modal styling */
.modal {
    z-index: 1050;
}

.modal-backdrop {
    z-index: 1040;
}

/* FORCE REMOVE ALL STUCK BACKDROPS */
body:not(.modal-open) .modal-backdrop {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
}

/* Ensure no backdrop is stuck */
.modal-backdrop.show {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
}

.modal-backdrop.fade {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
}

/* Force remove any overlay that might be blocking */
.modal-backdrop {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
    pointer-events: none !important;
}

/* Ensure body is not blocked */
body {
    overflow: auto !important;
    position: static !important;
}

/* Remove any fixed overlays */
[class*="backdrop"], [class*="overlay"] {
    display: none !important;
    visibility: hidden !important;
}

.container-fluid {
    max-width: 100%;
    padding: 0;
}

.card {
    width: 100%;
}

.table-responsive {
    width: 100%;
}

.table {
    width: 100%;
    min-width: 800px;
}

.page-header {
    margin-bottom: 2rem;
}

.page-title {
    font-size: 2rem;
    font-weight: 700;
    margin: 0;
    color: #2c3e50;
}

.page-subtitle {
    font-size: 1.1rem;
    margin: 0.5rem 0 0 0;
}

.stat-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    transition: transform 0.2s ease;
}

.stat-card:hover {
    transform: translateY(-2px);
}

.stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    font-size: 1.5rem;
    color: white;
}

.stat-number {
    font-size: 2rem;
    font-weight: 700;
    margin: 0;
    color: #2c3e50;
}

.stat-label {
    font-size: 0.9rem;
    color: #6c757d;
    margin: 0;
}

.card {
    border: none;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.table th {
    font-weight: 600;
    border-top: none;
    color: #495057;
}

.avatar {
    font-size: 1.5rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.avatar-img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #e9ecef;
}

.btn-group .btn {
    margin: 0 2px;
}

.form-label {
    font-weight: 600;
    color: #495057;
}
</style>

<script>
let userIdToDelete = null;

// Search and filter functionality
document.getElementById('searchInput').addEventListener('keyup', filterTable);
document.getElementById('roleFilter').addEventListener('change', filterTable);
document.getElementById('statusFilter').addEventListener('change', filterTable);

function filterTable() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const roleFilter = document.getElementById('roleFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    
    const table = document.getElementById('usersTable');
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
        const name = row.cells[1].textContent.toLowerCase();
        const email = row.cells[2].textContent.toLowerCase();
        const role = row.cells[3].textContent;
        const status = row.cells[5].textContent;
        
        const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
        const matchesRole = roleFilter === '' || role.includes(roleFilter === 'Admin' ? 'Quản trị viên' : 'Người dùng');
        const matchesStatus = statusFilter === '' || 
            (statusFilter === 'true' && status.includes('Hoạt động')) ||
            (statusFilter === 'false' && status.includes('Tạm khóa'));
        
        if (matchesSearch && matchesRole && matchesStatus) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('roleFilter').value = '';
    document.getElementById('statusFilter').value = '';
    filterTable();
}

// Delete functionality
function confirmDelete(id, name) {
    userIdToDelete = id;
    document.getElementById('userNameToDelete').textContent = name;
    const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
    modal.show();
}

document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
    if (userIdToDelete) {
        deleteUser(userIdToDelete);
    }
});

function deleteUser(id) {
    const formData = new FormData();
    formData.append('id', id);
    
    // Get CSRF token
    const token = document.querySelector('input[name="__RequestVerificationToken"]');
    if (token) {
        formData.append('__RequestVerificationToken', token.value);
    }
    
    fetch('/Admin/NguoiDung/DeleteUser', {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        if (data.success) {
            showAlert('success', data.message);
            // Close modal properly
            const modalElement = document.getElementById('deleteModal');
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            } else {
                // If no instance, create new one and hide
                const newModal = new bootstrap.Modal(modalElement);
                newModal.hide();
            }
            // Reload page after 2 seconds
            setTimeout(() => {
                location.reload();
            }, 2000);
        } else {
            showAlert('error', data.message || 'Có lỗi xảy ra khi xóa người dùng');
        }
    })
    .catch(error => {
        console.error('Delete error:', error);
        showAlert('error', 'Lỗi khi xóa người dùng: ' + error.message);
    });
}

function showAlert(type, message) {
    const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
    const alertHtml = `
        <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    // Remove existing alerts
    const existingAlerts = document.querySelectorAll('.alert');
    existingAlerts.forEach(alert => alert.remove());
    
    // Add new alert
    const container = document.querySelector('.admin-page');
    container.insertAdjacentHTML('afterbegin', alertHtml);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        const alert = document.querySelector('.alert');
        if (alert) {
            alert.remove();
        }
    }, 5000);
}

// Cleanup users function
function cleanupUsers() {
    if (confirm('Bạn có chắc chắn muốn dọn dẹp tài khoản test? Tất cả tài khoản không phải Admin sẽ bị xóa!')) {
        const formData = new FormData();
        
        // Get CSRF token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            formData.append('__RequestVerificationToken', token.value);
        }
        
        fetch('/Admin/NguoiDung/CleanupUsers', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showAlert('success', data.message);
                // Reload page after 2 seconds
                setTimeout(() => {
                    location.reload();
                }, 2000);
            } else {
                showAlert('error', data.message);
            }
        })
        .catch(error => {
            showAlert('error', 'Lỗi khi dọn dẹp: ' + error.message);
        });
    }
}


// Force remove any stuck modal backdrops immediately
function removeStuckBackdrops() {
    // Remove all modal backdrops
    const backdrops = document.querySelectorAll('.modal-backdrop');
    backdrops.forEach(backdrop => backdrop.remove());
    
    // Remove modal-open class from body
    document.body.classList.remove('modal-open');
    
    // Reset body padding and overflow
    document.body.style.paddingRight = '';
    document.body.style.overflow = '';
}

// Modal event handlers
document.addEventListener('DOMContentLoaded', function() {
    // Remove any stuck backdrops immediately
    removeStuckBackdrops();
    
    // Handle delete modal events
    const deleteModal = document.getElementById('deleteModal');
    if (deleteModal) {
        deleteModal.addEventListener('hidden.bs.modal', function() {
            // Reset any modal state if needed
            userIdToDelete = null;
            // Remove any stuck backdrops
            removeStuckBackdrops();
        });
    }
});

// Also run on page load
window.addEventListener('load', removeStuckBackdrops);
</script>

@Html.AntiForgeryToken()

<script>
// AGGRESSIVE FIX for stuck backdrop - run immediately and repeatedly
(function() {
    function forceRemoveBackdrop() {
        // Remove all modal backdrops
        const backdrops = document.querySelectorAll('.modal-backdrop');
        backdrops.forEach(backdrop => {
            backdrop.remove();
            backdrop.style.display = 'none';
        });
        
        // Remove modal-open class from body
        document.body.classList.remove('modal-open');
        
        // Reset body padding and overflow
        document.body.style.paddingRight = '';
        document.body.style.overflow = '';
        document.body.style.position = '';
        
        // Remove any overlay elements
        const overlays = document.querySelectorAll('[class*="overlay"], [class*="backdrop"], [class*="modal"]');
        overlays.forEach(overlay => {
            if (overlay.classList.contains('modal-backdrop') || overlay.classList.contains('show')) {
                overlay.remove();
            }
        });
        
        // Force remove any fixed positioned elements that might be blocking
        const fixedElements = document.querySelectorAll('[style*="position: fixed"]');
        fixedElements.forEach(el => {
            if (el.classList.contains('modal-backdrop') || el.style.zIndex > 1000) {
                el.remove();
            }
        });
    }
    
    // Run immediately
    forceRemoveBackdrop();
    
    // Run every 100ms for first 2 seconds
    let attempts = 0;
    const interval = setInterval(() => {
        forceRemoveBackdrop();
        attempts++;
        if (attempts > 20) {
            clearInterval(interval);
        }
    }, 100);
    
    // Also run on any click
    document.addEventListener('click', forceRemoveBackdrop);
    
    // Run on any key press
    document.addEventListener('keydown', forceRemoveBackdrop);
})();
</script>
