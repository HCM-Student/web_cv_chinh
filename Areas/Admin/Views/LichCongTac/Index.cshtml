@model IEnumerable<WEB_CV.Models.WorkScheduleEvent>
@{
    ViewData["Title"] = "Quản lý Lịch công tác";
}

<div class="container-fluid py-4">
  <!-- Header Section -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h2 class="h4 mb-1 text-primary">
            <i class="bi bi-calendar-week me-2"></i>
            Quản lý Lịch công tác (đơn vị)
          </h2>
          <p class="text-muted mb-0">Quản lý và theo dõi lịch công tác của các lãnh đạo</p>
        </div>
        <div class="d-flex gap-2">
          <a class="btn btn-success btn-lg" href="@Url.Action("CreateTestData")">
            <i class="bi bi-database-add me-2"></i>Tạo dữ liệu test
          </a>
          <a class="btn btn-primary btn-lg" href="@Url.Action("Create")">
            <i class="bi bi-plus-circle me-2"></i>Thêm lịch mới
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Alert Messages -->
  @if (TempData["SuccessMessage"] != null)
  {
      <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert">
          <i class="bi bi-check-circle me-2"></i>
          @TempData["SuccessMessage"]
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
  }

  <!-- Stats Cards -->
  <div class="row mb-4">
    <div class="col-md-3">
      <div class="card stats-card-primary">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="card-title text-muted mb-2 fw-bold">
                <i class="bi bi-calendar-event me-2"></i>TỔNG SỰ KIỆN
              </h6>
              <h2 class="mb-0 text-primary fw-bold display-6">@Model.Count()</h2>
            </div>
            <div class="text-primary">
              <i class="bi bi-calendar-event" style="font-size: 3rem;"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card stats-card-success">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="card-title text-muted mb-2 fw-bold">
                <i class="bi bi-calendar-week me-2"></i>TUẦN NÀY
              </h6>
              <h2 class="mb-0 text-success fw-bold display-6">@Model.Count(e => e.Date >= DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + 1) && e.Date <= DateTime.Today.AddDays(7 - (int)DateTime.Today.DayOfWeek))</h2>
            </div>
            <div class="text-success">
              <i class="bi bi-calendar-week" style="font-size: 3rem;"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card stats-card-warning">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="card-title text-muted mb-2 fw-bold">
                <i class="bi bi-calendar-day me-2"></i>HÔM NAY
              </h6>
              <h2 class="mb-0 text-warning fw-bold display-6">@Model.Count(e => e.Date.Date == DateTime.Today)</h2>
            </div>
            <div class="text-warning">
              <i class="bi bi-calendar-day" style="font-size: 3rem;"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card stats-card-info">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h6 class="card-title text-muted mb-2 fw-bold">
                <i class="bi bi-people me-2"></i>LÃNH ĐẠO
              </h6>
              <h2 class="mb-0 text-info fw-bold display-6">@Model.Select(e => e.Leader).Distinct().Count()</h2>
            </div>
            <div class="text-info">
              <i class="bi bi-people" style="font-size: 3rem;"></i>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Table -->
  <div class="card shadow-sm">
    <div class="card-header bg-white border-0 py-3">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0 text-dark">
          <i class="bi bi-table me-2"></i>Danh sách lịch công tác
        </h5>
        <div class="d-flex gap-2">
          <button class="btn btn-outline-secondary btn-sm" onclick="exportToExcel()">
            <i class="bi bi-file-earmark-excel me-1"></i>Xuất Excel
          </button>
          <button class="btn btn-outline-primary btn-sm" onclick="printTable()">
            <i class="bi bi-printer me-1"></i>In
          </button>
        </div>
      </div>
    </div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table table-hover mb-0 admin-schedule-table" id="scheduleTable">
          <thead class="table-dark">
            <tr>
              <th style="width: 120px">
                <i class="bi bi-calendar-date me-1"></i>Ngày
              </th>
              <th style="width: 100px">
                <i class="bi bi-clock me-1"></i>Giờ
              </th>
              <th style="width: 150px">
                <i class="bi bi-person-badge me-1"></i>Lãnh đạo
              </th>
              <th>
                <i class="bi bi-journal-text me-1"></i>Nội dung
              </th>
              <th style="width: 150px">
                <i class="bi bi-geo-alt me-1"></i>Địa điểm
              </th>
              <th style="width: 180px" class="text-center">
                <i class="bi bi-gear me-1"></i>Thao tác
              </th>
            </tr>
          </thead>
          <tbody>
          @if (!Model.Any())
          {
              <tr>
                  <td colspan="6" class="text-center py-5">
                    <div class="text-muted">
                      <i class="bi bi-calendar-x fs-1 d-block mb-3"></i>
                      <h5>Chưa có dữ liệu lịch công tác</h5>
                      <p class="mb-0">Nhấn "Thêm lịch mới" để bắt đầu tạo lịch công tác</p>
                    </div>
                  </td>
              </tr>
          }
          else
          {
              @foreach(var e in Model.OrderBy(x => x.Date).ThenBy(x => x.StartTime)){
                var isToday = e.Date.Date == DateTime.Today;
                var isPast = e.Date.Date < DateTime.Today;
                <tr class="@(isToday ? "table-warning" : isPast ? "table-light" : "")">
                  <td>
                    <div class="d-flex flex-column">
                      <span class="fw-bold @(isToday ? "text-warning" : "")">@e.Date.ToString("dd/MM/yyyy")</span>
                      <small class="text-muted">@GetDayOfWeek(e.Date.DayOfWeek)</small>
                      @if(isToday){
                        <span class="badge bg-warning text-dark mt-1">
                          <i class="bi bi-star-fill me-1"></i>Hôm nay
                        </span>
                      }
                    </div>
                  </td>
                  <td>
                    @if(e.StartTime.HasValue && e.EndTime.HasValue){
                      <span class="badge bg-primary">
                        @e.StartTime.Value.ToString(@"hh\:mm") - @e.EndTime.Value.ToString(@"hh\:mm")
                      </span>
                    } else if(e.StartTime.HasValue){
                      <span class="badge bg-secondary">@e.StartTime.Value.ToString(@"hh\:mm")</span>
                    } else {
                      <span class="text-muted">-</span>
                    }
                  </td>
                  <td>
                    <div class="d-flex align-items-center">
                      <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2">
                        @e.Leader.Substring(0, 1).ToUpper()
                      </div>
                      <span class="fw-semibold">@e.Leader</span>
                    </div>
                  </td>
                  <td>
                    <div class="fw-bold text-dark mb-1">@e.Title</div>
                    @if(!string.IsNullOrWhiteSpace(e.Organization)){
                      <small class="text-muted d-block">
                        <i class="bi bi-building me-1"></i>@e.Organization
                      </small>
                    }
                    @if(!string.IsNullOrWhiteSpace(e.Participants)){
                      <small class="text-info d-block">
                        <i class="bi bi-people me-1"></i>@e.Participants
                      </small>
                    }
                    @if(!string.IsNullOrWhiteSpace(e.Preparation)){
                      <small class="text-warning d-block">
                        <i class="bi bi-tools me-1"></i>Chuẩn bị: @e.Preparation
                      </small>
                    }
                    @if(!string.IsNullOrWhiteSpace(e.Contact)){
                      <small class="text-success d-block">
                        <i class="bi bi-person-lines-fill me-1"></i>@e.Contact
                      </small>
                    }
                  </td>
                  <td>
                    @if(!string.IsNullOrWhiteSpace(e.Location)){
                      <span class="text-success">
                        <i class="bi bi-geo-alt me-1"></i>@e.Location
                      </span>
                    } else {
                      <span class="text-muted">-</span>
                    }
                  </td>
                  <td class="text-center">
                    <div class="d-flex gap-1 justify-content-center">
                      <a class="btn btn-sm btn-outline-primary" href="@Url.Action("Edit", new{id=e.Id})" title="Sửa">
                        <i class="bi bi-pencil me-1"></i>Sửa
                      </a>
                      <form class="d-inline" method="post" action="@Url.Action("Delete", new{id=e.Id})" onsubmit="return confirm('Bạn có chắc chắn muốn xóa lịch công tác này?')">
                        <button class="btn btn-sm btn-outline-danger" type="submit" title="Xóa">
                          <i class="bi bi-trash me-1"></i>Xóa
                        </button>
                      </form>
                    </div>
                  </td>
                </tr>
              }
          }
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

@section Styles {
<style>
/* Custom Admin Styles */
.avatar-sm {
  width: 32px;
  height: 32px;
  font-size: 0.875rem;
  font-weight: 600;
}

.admin-schedule-table {
  font-size: 0.9rem;
}

.admin-schedule-table thead th {
  background: #343a40 !important;
  color: white !important;
  font-weight: 600;
  border: none;
  padding: 1rem 0.75rem;
  vertical-align: middle;
}

.admin-schedule-table tbody tr {
  transition: all 0.2s ease;
  border-bottom: 1px solid #dee2e6;
}

.admin-schedule-table tbody tr:hover {
  background-color: #f8f9fa !important;
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.admin-schedule-table tbody tr.table-warning {
  background-color: #fff3cd !important;
  border-left: 4px solid #ffc107;
}

.admin-schedule-table tbody tr.table-light {
  background-color: #f8f9fa !important;
  opacity: 0.7;
}

.admin-schedule-table td {
  vertical-align: middle;
  padding: 1rem 0.75rem;
  word-wrap: break-word;
  word-break: keep-all;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 200px;
}

/* Fix specific columns */
.admin-schedule-table td:nth-child(4) { /* Nội dung column */
  white-space: normal;
  max-width: 300px;
}

.admin-schedule-table td:nth-child(5) { /* Địa điểm column */
  white-space: normal;
  max-width: 150px;
  word-break: break-word;
}

.admin-schedule-table td:nth-child(6) { /* Thao tác column */
  white-space: nowrap;
  max-width: 180px;
}

/* Stats Cards - Clean Design */
.stats-card-primary,
.stats-card-success,
.stats-card-warning,
.stats-card-info {
  background: white !important;
  border-radius: 12px;
  transition: all 0.3s ease;
  border-left: 4px solid;
  box-shadow: 0 2px 10px rgba(0,0,0,0.08);
}

.stats-card-primary {
  border-left-color: #0d6efd;
}

.stats-card-success {
  border-left-color: #198754;
}

.stats-card-warning {
  border-left-color: #ffc107;
}

.stats-card-info {
  border-left-color: #0dcaf0;
}

.stats-card-primary:hover,
.stats-card-success:hover,
.stats-card-warning:hover,
.stats-card-info:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.1) !important;
}


/* Card body padding */
.stats-card-primary .card-body,
.stats-card-success .card-body,
.stats-card-warning .card-body,
.stats-card-info .card-body {
  padding: 1.5rem;
}

/* Buttons */
.btn-group .btn {
  border-radius: 0.375rem;
  margin: 0 2px;
  font-weight: 600;
  border-width: 2px;
}

.btn-group .btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Action buttons */
.d-flex.gap-1 .btn {
  font-size: 0.8rem;
  padding: 0.375rem 0.75rem;
  min-width: 70px;
  white-space: nowrap;
}

/* Fix button text visibility */
.btn-outline-primary {
  color: #0d6efd !important;
  border-color: #0d6efd !important;
  background-color: transparent !important;
}

.btn-outline-primary:hover {
  color: white !important;
  background-color: #0d6efd !important;
  border-color: #0d6efd !important;
}

.btn-outline-danger {
  color: #dc3545 !important;
  border-color: #dc3545 !important;
  background-color: transparent !important;
}

.btn-outline-danger:hover {
  color: white !important;
  background-color: #dc3545 !important;
  border-color: #dc3545 !important;
}

/* Badges */
.badge {
  font-size: 0.75rem;
  padding: 0.5rem 0.75rem;
  border-radius: 0.5rem;
}

/* Responsive */
@@media (max-width: 768px) {
  .d-flex.gap-2 {
    flex-direction: column;
    gap: 0.5rem !important;
  }
  
  .btn-lg {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
  }
  
  .admin-schedule-table {
    font-size: 0.8rem;
  }
  
  .admin-schedule-table td {
    padding: 0.75rem 0.5rem;
  }
}
</style>
}

@section Scripts {
<!-- SheetJS CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

<script>
function exportToExcel() {
  try {
    // Tạo dữ liệu Excel
    const data = [
      ['Ngày', 'Giờ', 'Lãnh đạo', 'Nội dung', 'Địa điểm', 'Tổ chức', 'Thành phần', 'Chuẩn bị', 'Liên hệ']
    ];
    
    // Lấy dữ liệu từ bảng
    const table = document.getElementById('scheduleTable');
    const rows = table.querySelectorAll('tbody tr');
    
    rows.forEach(row => {
      const cells = row.querySelectorAll('td');
      if (cells.length >= 6) {
        // Lấy dữ liệu từng cột
        const ngay = cells[0]?.textContent?.trim() || '';
        const gio = cells[1]?.textContent?.trim() || '';
        const lanhDao = cells[2]?.textContent?.trim() || '';
        const noiDung = cells[3]?.textContent?.trim() || '';
        const diaDiem = cells[4]?.textContent?.trim() || '';
        
        // Tách thông tin từ cột nội dung (có thể chứa tổ chức, thành phần)
        let toChuc = '';
        let thanhPhan = '';
        let chuanBi = '';
        let lienHe = '';
        
        // Tìm thông tin tổ chức trong cột nội dung
        const noiDungText = cells[3]?.innerHTML || '';
        const toChucMatch = noiDungText.match(/<i class="bi bi-building[^>]*><\/i>\s*([^<]+)/);
        if (toChucMatch) {
          toChuc = toChucMatch[1].trim();
        }
        
        // Tìm thông tin thành phần
        const thanhPhanMatch = noiDungText.match(/<i class="bi bi-people[^>]*><\/i>\s*([^<]+)/);
        if (thanhPhanMatch) {
          thanhPhan = thanhPhanMatch[1].trim();
        }
        
        // Tìm thông tin chuẩn bị
        const chuanBiMatch = noiDungText.match(/<i class="bi bi-tools[^>]*><\/i>\s*Chuẩn bị:\s*([^<]+)/);
        if (chuanBiMatch) {
          chuanBi = chuanBiMatch[1].trim();
        }
        
        // Tìm thông tin liên hệ
        const lienHeMatch = noiDungText.match(/<i class="bi bi-person-lines-fill[^>]*><\/i>\s*([^<]+)/);
        if (lienHeMatch) {
          lienHe = lienHeMatch[1].trim();
        }
        
        const rowData = [
          ngay,
          gio,
          lanhDao,
          noiDung.replace(/<[^>]*>/g, '').trim(), // Loại bỏ HTML tags
          diaDiem.replace(/<[^>]*>/g, '').trim(), // Loại bỏ HTML tags
          toChuc,
          thanhPhan,
          chuanBi,
          lienHe
        ];
        data.push(rowData);
      }
    });
    
    // Tạo workbook
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.aoa_to_sheet(data);
    
    // Đặt độ rộng cột
    ws['!cols'] = [
      { width: 12 }, // Ngày
      { width: 15 }, // Giờ
      { width: 20 }, // Lãnh đạo
      { width: 40 }, // Nội dung
      { width: 25 }, // Địa điểm
      { width: 20 }, // Tổ chức
      { width: 25 }, // Thành phần
      { width: 25 }, // Chuẩn bị
      { width: 20 }  // Liên hệ
    ];
    
    // Định dạng header
    const headerStyle = {
      font: { bold: true, color: { rgb: "FFFFFF" } },
      fill: { fgColor: { rgb: "4472C4" } },
      alignment: { horizontal: "center", vertical: "center" }
    };
    
    // Áp dụng style cho header
    for (let i = 0; i < data[0].length; i++) {
      const cellAddress = XLSX.utils.encode_cell({ r: 0, c: i });
      if (!ws[cellAddress]) ws[cellAddress] = { v: data[0][i] };
      ws[cellAddress].s = headerStyle;
    }
    
    XLSX.utils.book_append_sheet(wb, ws, 'Lịch công tác');
    
    // Xuất file
    const fileName = 'lich-cong-tac-' + new Date().toISOString().split('T')[0] + '.xlsx';
    XLSX.writeFile(wb, fileName);
    
    // Thông báo thành công
    alert('Xuất Excel thành công! File đã được tải về.');
  } catch (error) {
    console.error('Lỗi xuất Excel:', error);
    alert('Có lỗi xảy ra khi xuất Excel. Vui lòng thử lại.');
  }
}

function printTable() {
  // Ẩn các nút không cần thiết khi in
  const buttons = document.querySelectorAll('.btn');
  buttons.forEach(btn => btn.style.display = 'none');
  
  window.print();
  
  // Hiện lại các nút sau khi in
  setTimeout(() => {
    buttons.forEach(btn => btn.style.display = '');
  }, 1000);
}

// Thêm hiệu ứng loading khi submit form
document.addEventListener('DOMContentLoaded', function() {
  const forms = document.querySelectorAll('form[method="post"]');
  forms.forEach(form => {
    form.addEventListener('submit', function() {
      const submitBtn = form.querySelector('button[type="submit"]');
      if (submitBtn) {
        submitBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Đang xử lý...';
        submitBtn.disabled = true;
      }
    });
  });
});
</script>
}

@functions {
    string GetDayOfWeek(DayOfWeek dayOfWeek)
    {
        return dayOfWeek switch
        {
            DayOfWeek.Monday => "Thứ 2",
            DayOfWeek.Tuesday => "Thứ 3",
            DayOfWeek.Wednesday => "Thứ 4",
            DayOfWeek.Thursday => "Thứ 5",
            DayOfWeek.Friday => "Thứ 6",
            DayOfWeek.Saturday => "Thứ 7",
            DayOfWeek.Sunday => "Chủ nhật",
            _ => ""
        };
    }
}
