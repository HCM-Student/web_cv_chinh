@model IEnumerable<WEB_CV.Models.BinhLuan>
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Quản lý bình luận";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<style>
:root{
  --brand: #0061ff;
  --brand-light: rgba(0, 97, 255, 0.1);
  --ring: rgba(0, 97, 255, 0.2);
  --card: #ffffff;
  --border: #e5e7eb;
  --muted: #64748b;
  --success: #10b981;
  --danger: #ef4444;
  --warning: #f59e0b;
  --info: #06b6d4;
  --dark: #1e293b;
  --light-bg: #f8fafc;
}

/* Header Section */
.page-header {
  background: linear-gradient(135deg, var(--brand) 0%, #0052d4 100%);
  padding: 2rem 2rem 1rem;
  margin: -2rem -2rem 2rem;
  color: white;
  border-radius: 0 0 24px 24px;
}

.page-title {
  font-size: 2rem;
  font-weight: 700;
  margin: 0 0 0.5rem 0;
  display: flex;
  align-items: center;
  letter-spacing: -0.5px;
}

.page-subtitle {
  font-size: 1rem;
  opacity: 0.9;
  margin: 0;
}

/* Stats Cards */
.stats-section {
  margin-bottom: 2rem;
}

.stat-card {
  background: white;
  border-radius: 16px;
  padding: 1.5rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid var(--border);
  height: 100%;
  cursor: pointer;
}

.stat-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.12);
}

.stat-icon {
  width: 56px;
  height: 56px;
  border-radius: 14px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.bg-primary { background: linear-gradient(135deg, var(--brand), #0052d4); }
.bg-success { background: linear-gradient(135deg, var(--success), #059669); }
.bg-warning { background: linear-gradient(135deg, var(--warning), #d97706); }
.bg-danger { background: linear-gradient(135deg, var(--danger), #dc2626); }
.bg-info { background: linear-gradient(135deg, var(--info), #0891b2); }

.stat-number {
  font-size: 2rem;
  font-weight: 700;
  color: var(--dark);
  margin: 0 0 0.25rem 0;
}

.stat-label {
  color: var(--muted);
  font-size: 0.9rem;
  font-weight: 500;
  margin: 0;
}

/* Filter Section */
.filter-section {
  background: white;
  padding: 1.5rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  margin-bottom: 2rem;
  border: 1px solid var(--border);
}

.filter-title {
  font-size: 1.25rem;
  font-weight: 700;
  color: var(--dark);
  margin: 0 0 1rem 0;
}

.form-select, .form-control {
  border: 2px solid var(--border);
  border-radius: 12px;
  padding: 0.75rem 1rem;
  transition: all 0.2s ease;
  background: var(--light-bg);
}

.form-select:focus, .form-control:focus {
  border-color: var(--brand);
  box-shadow: 0 0 0 3px var(--ring);
  background: white;
}

.btn-modern {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.25rem;
  border: 2px solid transparent;
  border-radius: 12px;
  font-weight: 600;
  font-size: 0.9rem;
  transition: all 0.2s ease;
  cursor: pointer;
  text-decoration: none;
}

.btn-primary-modern {
  background: linear-gradient(135deg, var(--brand), #0052d4);
  color: white;
  box-shadow: 0 4px 14px rgba(0, 97, 255, 0.3);
}

.btn-primary-modern:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 97, 255, 0.4);
  color: white;
}

.btn-success-modern {
  background: linear-gradient(135deg, var(--success), #059669);
  color: white;
  box-shadow: 0 4px 14px rgba(16, 185, 129, 0.3);
}

.btn-success-modern:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
  color: white;
}

.btn-danger-modern {
  background: linear-gradient(135deg, var(--danger), #dc2626);
  color: white;
  box-shadow: 0 4px 14px rgba(239, 68, 68, 0.3);
}

.btn-danger-modern:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4);
  color: white;
}

.btn-outline-modern {
  background: white;
  color: var(--dark);
  border-color: var(--border);
}

.btn-outline-modern:hover {
  background: var(--brand-light);
  border-color: var(--brand);
  color: var(--brand);
  transform: translateY(-1px);
}

/* Bulk Actions */
.bulk-actions {
  background: white;
  padding: 1rem 1.5rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  margin-bottom: 1.5rem;
  border: 1px solid var(--border);
}

.bulk-title {
  font-size: 1.1rem;
  font-weight: 600;
  color: var(--dark);
  margin: 0 0 1rem 0;
}

/* Comment Cards */
.comments-container {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid var(--border);
  overflow: hidden;
}

.comment-card {
  padding: 1.5rem;
  border-bottom: 1px solid var(--border);
  transition: all 0.2s ease;
  position: relative;
}

.comment-card:last-child {
  border-bottom: none;
}

.comment-card:hover {
  background: var(--light-bg);
}

.comment-header {
  display: flex;
  justify-content: between;
  align-items: flex-start;
  margin-bottom: 1rem;
}

.comment-checkbox {
  margin-right: 1rem;
  transform: scale(1.2);
  accent-color: var(--brand);
}

.comment-content {
  flex: 1;
}

.comment-text {
  color: var(--dark);
  font-size: 0.95rem;
  line-height: 1.6;
  margin: 0 0 1rem 0;
  padding: 1rem;
  background: var(--light-bg);
  border-radius: 12px;
  border-left: 4px solid var(--brand);
}

.comment-meta {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1rem;
}

.meta-item {
  display: flex;
  flex-direction: column;
}

.meta-label {
  font-size: 0.8rem;
  color: var(--muted);
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  margin-bottom: 0.25rem;
}

.meta-value {
  font-size: 0.9rem;
  color: var(--dark);
  font-weight: 500;
}

.meta-value a {
  color: var(--brand);
  text-decoration: none;
  transition: color 0.2s ease;
}

.meta-value a:hover {
  color: #0052d4;
}

.status-badge {
  padding: 0.5rem 1rem;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 600;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.status-pending {
  background: rgba(245, 158, 11, 0.1);
  color: var(--warning);
  border: 1px solid rgba(245, 158, 11, 0.2);
}

.status-approved {
  background: rgba(16, 185, 129, 0.1);
  color: var(--success);
  border: 1px solid rgba(16, 185, 129, 0.2);
}

.status-rejected {
  background: rgba(239, 68, 68, 0.1);
  color: var(--danger);
  border: 1px solid rgba(239, 68, 68, 0.2);
}

.comment-actions {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.btn-sm-modern {
  padding: 0.5rem 0.75rem;
  font-size: 0.8rem;
  border-radius: 8px;
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
  transition: all 0.2s ease;
}

.btn-info-modern {
  background: rgba(6, 182, 212, 0.1);
  color: var(--info);
  border: 1px solid rgba(6, 182, 212, 0.2);
}

.btn-info-modern:hover {
  background: rgba(6, 182, 212, 0.2);
  color: var(--info);
  transform: translateY(-1px);
}

.btn-success-sm {
  background: rgba(16, 185, 129, 0.1);
  color: var(--success);
  border: 1px solid rgba(16, 185, 129, 0.2);
}

.btn-success-sm:hover {
  background: rgba(16, 185, 129, 0.2);
  color: var(--success);
  transform: translateY(-1px);
}

.btn-warning-sm {
  background: rgba(245, 158, 11, 0.1);
  color: var(--warning);
  border: 1px solid rgba(245, 158, 11, 0.2);
}

.btn-warning-sm:hover {
  background: rgba(245, 158, 11, 0.2);
  color: var(--warning);
  transform: translateY(-1px);
}

.btn-danger-sm {
  background: rgba(239, 68, 68, 0.1);
  color: var(--danger);
  border: 1px solid rgba(239, 68, 68, 0.2);
}

.btn-danger-sm:hover {
  background: rgba(239, 68, 68, 0.2);
  color: var(--danger);
  transform: translateY(-1px);
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 4rem 2rem;
  color: var(--muted);
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid var(--border);
}

.empty-icon {
  font-size: 4rem;
  color: var(--border);
  margin-bottom: 1rem;
}

.empty-title {
  font-size: 1.25rem;
  font-weight: 600;
  color: var(--dark);
  margin-bottom: 0.5rem;
}

.empty-text {
  font-size: 0.95rem;
  color: var(--muted);
}

/* Notification */
.notification {
  position: fixed;
  top: 2rem;
  right: 2rem;
  z-index: 9999;
  min-width: 300px;
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  border-radius: 12px;
}

/* Responsive */
@@media (max-width: 768px) {
  .comment-meta {
    grid-template-columns: 1fr;
    gap: 0.5rem;
  }
  
  .comment-actions {
    justify-content: center;
  }
  
  .bulk-actions .d-flex {
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .page-header {
    padding: 1.5rem 1rem 1rem;
    margin: -2rem -2rem 1.5rem;
  }
  
  .page-title {
    font-size: 1.5rem;
  }
  
  .stat-number {
    font-size: 1.75rem;
  }
}

@@media (max-width: 576px) {
  .comment-card {
    padding: 1rem;
  }
  
  .btn-modern {
    width: 100%;
    justify-content: center;
  }
}
</style>

<div class="admin-comments-page">
  <!-- Header Section -->
  <div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
      <div>
        <h1 class="page-title">
          <i class="fas fa-comments me-2"></i>
          Quản lý bình luận
        </h1>
        <p class="page-subtitle">Duyệt, quản lý và theo dõi tất cả bình luận từ người dùng</p>
      </div>
      <div class="d-flex gap-2">
        <button class="btn btn-outline-light" onclick="location.reload()">
          <i class="fas fa-sync-alt me-1"></i>
          Làm mới
        </button>
      </div>
    </div>
  </div>

  @if (TempData["SuccessMessage"] != null)
  {
    <div class="alert alert-success alert-dismissible fade show notification" role="alert">
      <i class="fas fa-check-circle me-2"></i>
      @TempData["SuccessMessage"]
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
  }

  <!-- Stats Cards -->
  <div class="stats-section">
    <div class="row g-3">
      <div class="col-md-3">
        <div class="stat-card" onclick="filterByStatus('')">
          <div class="stat-icon bg-primary">
            <i class="fas fa-comments"></i>
          </div>
          <h3 class="stat-number">@ViewBag.TotalComments</h3>
          <p class="stat-label">Tổng bình luận</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stat-card" onclick="filterByStatus(0)">
          <div class="stat-icon bg-warning">
            <i class="fas fa-clock"></i>
          </div>
          <h3 class="stat-number">@ViewBag.PendingComments</h3>
          <p class="stat-label">Chờ duyệt</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stat-card" onclick="filterByStatus(1)">
          <div class="stat-icon bg-success">
            <i class="fas fa-check"></i>
          </div>
          <h3 class="stat-number">@ViewBag.ApprovedComments</h3>
          <p class="stat-label">Đã duyệt</p>
        </div>
      </div>
      <div class="col-md-3">
        <div class="stat-card">
          <div class="stat-icon bg-info">
            <i class="fas fa-calendar-day"></i>
          </div>
          <h3 class="stat-number">@ViewBag.TodayComments</h3>
          <p class="stat-label">Hôm nay</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Filter Section -->
  <div class="filter-section">
    <h3 class="filter-title">Bộ lọc và tìm kiếm</h3>
    <form method="get" class="row g-3 align-items-end">
      <div class="col-md-4">
        <label class="form-label fw-bold">Trạng thái</label>
        @{
          var statusOptions = new SelectList(new[]
          {
            new { Value = "", Text = "Tất cả trạng thái" },
            new { Value = "0", Text = "Chờ duyệt" },
            new { Value = "1", Text = "Đã duyệt" },
            new { Value = "2", Text = "Từ chối" }
          }, "Value", "Text", ViewBag.TrangThai?.ToString());
        }
        @Html.DropDownList("trangThai", statusOptions, new { @class = "form-select" })
      </div>
      <div class="col-md-4">
        <button type="submit" class="btn-modern btn-primary-modern w-100">
          <i class="fas fa-filter"></i>
          Áp dụng bộ lọc
        </button>
      </div>
    </form>
  </div>

  @if (!Model.Any())
  {
    <div class="empty-state">
      <i class="fas fa-comment-slash empty-icon"></i>
      <h3 class="empty-title">Không có bình luận nào</h3>
      <p class="empty-text">Chưa có bình luận nào phù hợp với tiêu chí lọc hiện tại</p>
    </div>
  }
  else
  {
    <!-- Bulk Actions -->
    <div class="bulk-actions">
      <h4 class="bulk-title">Thao tác hàng loạt</h4>
      <div class="d-flex gap-2 align-items-center flex-wrap">
        <button type="button" class="btn-modern btn-outline-modern" onclick="selectAll()">
          <i class="fas fa-check-square"></i>
          Chọn tất cả
        </button>
        <button type="button" class="btn-modern btn-success-modern" onclick="bulkApprove()">
          <i class="fas fa-check"></i>
          Duyệt hàng loạt
        </button>
        <button type="button" class="btn-modern btn-danger-modern" onclick="bulkReject()">
          <i class="fas fa-times"></i>
          Từ chối hàng loạt
        </button>
        <span class="text-muted ms-auto" id="selectedCount">
          Đã chọn: <strong>0</strong> bình luận
        </span>
      </div>
    </div>

    <!-- Comments List -->
    <div class="comments-container">
      @foreach (var comment in Model)
      {
        <div class="comment-card">
          <div class="comment-header">
            <input type="checkbox" class="comment-checkbox" value="@comment.Id" onchange="updateSelectedCount()">
            <div class="comment-content">
              <div class="comment-text">
                "@comment.NoiDung"
              </div>
              
              <div class="comment-meta">
                <div class="meta-item">
                  <div class="meta-label">
                    <i class="fas fa-user me-1"></i>
                    Người gửi
                  </div>
                  <div class="meta-value">
                    @if (comment.NguoiDung != null)
                    {
                      <div>
                        <strong>@comment.NguoiDung.HoTen</strong><br>
                        <small class="text-muted">@comment.NguoiDung.Email</small>
                      </div>
                    }
                    else
                    {
                      <div>
                        <strong>@comment.HoTen</strong><br>
                        <small class="text-muted">@comment.Email</small>
                      </div>
                    }
                  </div>
                </div>
                
                <div class="meta-item">
                  <div class="meta-label">
                    <i class="fas fa-newspaper me-1"></i>
                    Bài viết
                  </div>
                  <div class="meta-value">
                    <a href="@Url.Action("ChiTietBaiViet", "Home", new { id = comment.BaiVietId })" 
                       target="_blank">
                      @comment.BaiViet.TieuDe
                    </a>
                  </div>
                </div>
                
                <div class="meta-item">
                  <div class="meta-label">
                    <i class="fas fa-calendar me-1"></i>
                    Ngày gửi
                  </div>
                  <div class="meta-value">
                    @comment.Ngay.ToString("dd/MM/yyyy HH:mm")
                  </div>
                </div>
              </div>

              <div class="d-flex justify-content-between align-items-center">
                <div>
                  @switch (comment.TrangThai)
                  {
                    case 0:
                      <span class="status-badge status-pending">
                        <i class="fas fa-clock"></i>
                        Chờ duyệt
                      </span>
                      break;
                    case 1:
                      <span class="status-badge status-approved">
                        <i class="fas fa-check"></i>
                        Đã duyệt
                      </span>
                      break;
                    case 2:
                      <span class="status-badge status-rejected">
                        <i class="fas fa-times"></i>
                        Từ chối
                      </span>
                      break;
                  }
                </div>
                
                <div class="comment-actions">
                  <a href="@Url.Action("Details", new { id = comment.Id })" 
                     class="btn-sm-modern btn-info-modern">
                    <i class="fas fa-eye"></i>
                    Xem
                  </a>
                  
                  @if (comment.TrangThai == 0)
                  {
                    <form method="post" action="@Url.Action("Approve", new { id = comment.Id })" 
                          style="display: inline;" onsubmit="return confirm('Duyệt bình luận này?')">
                      @Html.AntiForgeryToken()
                      <button type="submit" class="btn-sm-modern btn-success-sm">
                        <i class="fas fa-check"></i>
                        Duyệt
                      </button>
                    </form>
                    <form method="post" action="@Url.Action("Reject", new { id = comment.Id })" 
                          style="display: inline;" onsubmit="return confirm('Từ chối bình luận này?')">
                      @Html.AntiForgeryToken()
                      <button type="submit" class="btn-sm-modern btn-warning-sm">
                        <i class="fas fa-times"></i>
                        Từ chối
                      </button>
                    </form>
                  }
                  
                  <form method="post" action="@Url.Action("Delete", new { id = comment.Id })" 
                        style="display: inline;" onsubmit="return confirm('Xóa bình luận này vĩnh viễn?')">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn-sm-modern btn-danger-sm">
                      <i class="fas fa-trash"></i>
                      Xóa
                    </button>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      }
    </div>
  }
</div>

<!-- Form ẩn cho bulk actions -->
<form id="bulkApproveForm" method="post" action="@Url.Action("BulkApprove")" style="display: none;">
  @Html.AntiForgeryToken()
  <input type="hidden" name="commentIds" id="bulkApproveIds">
</form>

<form id="bulkRejectForm" method="post" action="@Url.Action("BulkReject")" style="display: none;">
  @Html.AntiForgeryToken()
  <input type="hidden" name="commentIds" id="bulkRejectIds">
</form>

@section Scripts {
  <script>
    function updateSelectedCount() {
      const checkboxes = document.querySelectorAll('.comment-checkbox:checked');
      document.getElementById('selectedCount').innerHTML = `Đã chọn: <strong>${checkboxes.length}</strong> bình luận`;
    }

    function toggleSelectAll() {
      const selectAll = document.getElementById('selectAllCheckbox');
      const checkboxes = document.querySelectorAll('.comment-checkbox');
      checkboxes.forEach(cb => cb.checked = selectAll.checked);
      updateSelectedCount();
    }

    function selectAll() {
      const checkboxes = document.querySelectorAll('.comment-checkbox');
      const allSelected = Array.from(checkboxes).every(cb => cb.checked);
      
      checkboxes.forEach(cb => cb.checked = !allSelected);
      updateSelectedCount();
    }

    function bulkApprove() {
      const selectedIds = getSelectedIds();
      if (selectedIds.length === 0) {
        showNotification('Vui lòng chọn ít nhất một bình luận!', 'warning');
        return;
      }
      if (confirm(`Duyệt ${selectedIds.length} bình luận đã chọn?`)) {
        document.getElementById('bulkApproveIds').value = selectedIds.join(',');
        document.getElementById('bulkApproveForm').submit();
      }
    }

    function bulkReject() {
      const selectedIds = getSelectedIds();
      if (selectedIds.length === 0) {
        showNotification('Vui lòng chọn ít nhất một bình luận!', 'warning');
        return;
      }
      if (confirm(`Từ chối ${selectedIds.length} bình luận đã chọn?`)) {
        document.getElementById('bulkRejectIds').value = selectedIds.join(',');
        document.getElementById('bulkRejectForm').submit();
      }
    }

    function getSelectedIds() {
      const checkboxes = document.querySelectorAll('.comment-checkbox:checked');
      return Array.from(checkboxes).map(cb => cb.value);
    }

    function filterByStatus(status) {
      const url = new URL(window.location);
      if (status === '') {
        url.searchParams.delete('trangThai');
      } else {
        url.searchParams.set('trangThai', status);
      }
      window.location = url;
    }

    function showNotification(message, type = 'success') {
      const notification = document.createElement('div');
      notification.className = `alert alert-${type} alert-dismissible fade show notification`;
      notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 5000);
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      updateSelectedCount();
      
      // Auto dismiss notifications after 5 seconds
      const alerts = document.querySelectorAll('.alert');
      alerts.forEach(alert => {
        setTimeout(() => {
          if (alert.parentNode) {
            alert.remove();
          }
        }, 5000);
      });
    });
  </script>
}