@model IEnumerable<WEB_CV.Models.ChatMessage>
@{
  Layout = "_Layout";
  var meId = (string?)ViewBag.MeId ?? "";
  var meName = (string?)ViewBag.MeName ?? "Unknown";
  var room = (string?)ViewBag.Room ?? "general";
  var users = (IEnumerable<dynamic>?)ViewBag.Users ?? new List<dynamic>();
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

<div class="container-xxl py-3">
  <div class="row g-3">
    <aside class="col-lg-3">
      <div class="card shadow-sm">
        <div class="card-header fw-bold">Kênh</div>
        <div class="list-group list-group-flush">
          <a class="list-group-item list-group-item-action @(room=="general"?"active":"")"
             href="@Url.Action("Index", new{room="general"})"># general</a>
        </div>
      </div>

      <div class="card shadow-sm mt-3">
        <div class="card-header fw-bold">Nhắn riêng</div>
        <div class="list-group list-group-flush small">
          @foreach (var u in users)
          {
            if (u.Id == meId) { continue; }
            <a class="list-group-item list-group-item-action dm-open @(room == "dm:" + (string.CompareOrdinal(meId, u.Id) < 0 ? meId + ":" + u.Id : u.Id + ":" + meId) ? "active" : "")" 
               data-id="@u.Id" data-name="@u.UserName" href="javascript:void(0)">
              <div class="d-flex align-items-center">
                <div class="user-avatar me-2">
                  @if (!string.IsNullOrEmpty(u.Avatar))
                  {
                    <img src="@u.Avatar" alt="@u.UserName" class="avatar-img">
                  }
                  else
                  {
                    <i class="bi bi-person-circle"></i>
                  }
                </div>
                <span>@u.UserName</span>
                <span class="badge bg-primary ms-auto" id="unread-@u.Id" style="display:none;">0</span>
              </div>
            </a>
          }
        </div>
      </div>
    </aside>

    <section class="col-lg-9">
      <div class="card shadow-sm chat-card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <div class="fw-bold">
            @if (room.StartsWith("dm:"))
            {
              <i class="bi bi-person-circle me-2"></i>@ViewBag.RoomDisplayName
            }
            else
            {
              <text># @ViewBag.RoomDisplayName</text>
            }
          </div>
          <div class="small text-muted" id="typing">
            <span class="typing-indicator" style="display:none;">
              <i class="bi bi-three-dots"></i> Đang nhập...
            </span>
          </div>
        </div>
        
        <div class="chat-body" id="messages">
            @foreach (var m in Model)
            {
              <div class="msg @(m.SenderId==meId?"me":"other")" data-id="@m.Id">
                @if (m.SenderId != meId)
                {
                  <div class="msg-avatar">
                    @{
                      var userAvatars = ViewBag.UserAvatars as Dictionary<string, string>;
                      var senderAvatar = userAvatars?.GetValueOrDefault(m.SenderId);
                    }
                    @if (!string.IsNullOrEmpty(senderAvatar))
                    {
                      <img src="@senderAvatar" alt="@m.SenderName" class="avatar-img">
                    }
                    else
                    {
                      <i class="bi bi-person-circle"></i>
                    }
                  </div>
                }
                <div class="msg-content">
                  @if (m.SenderId != meId)
                  {
                    <div class="msg-name">@m.SenderName</div>
                  }
                  <div class="msg-bubble">
                    @if (!string.IsNullOrWhiteSpace(m.Content))
                    {
                      <div class="msg-text">@m.Content</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(m.ImageUrl))
                    {
                      <img class="msg-image" src="@m.ImageUrl" alt="image" />
                    }
                    <div class="msg-time">
                      <span class="time">@m.CreatedAt.ToString("HH:mm")</span>
                      @if (m.SenderId == meId && room.StartsWith("dm:"))
                      {
                        <span class="status">
                          @if (m.Status == WEB_CV.Models.MessageStatus.Seen)
                          {
                            <i class="bi bi-check2-all text-primary"></i><span class="status-text">Đã xem</span>
                          }
                          else if (m.Status == WEB_CV.Models.MessageStatus.Delivered)
                          {
                            <i class="bi bi-check2-all"></i><span class="status-text">Đã nhận</span>
                          }
                          else
                          {
                            <i class="bi bi-check2"></i><span class="status-text">Đã gửi</span>
                          }
                        </span>
                      }
                    </div>
                  </div>
                </div>
                @if (m.SenderId == meId)
                {
                  <div class="msg-avatar">
                    @{
                      var userAvatars = ViewBag.UserAvatars as Dictionary<string, string>;
                      var myAvatar = userAvatars?.GetValueOrDefault(m.SenderId);
                    }
                    @if (!string.IsNullOrEmpty(myAvatar))
                    {
                      <img src="@myAvatar" alt="@m.SenderName" class="avatar-img">
                    }
                    else
                    {
                      <i class="bi bi-person-circle"></i>
                    }
                  </div>
                }
              </div>
            }
          </div>

        <!-- Form nhập liệu -->
        <div class="card-footer">
          <!-- Upload form ẩn -->
          <form id="uploadForm" enctype="multipart/form-data" class="d-none">
            @Html.AntiForgeryToken()
            <input id="fileInput" name="file" type="file" accept="image/*"/>
          </form>

          <button id="btnImage" class="btn btn-outline-secondary" type="button" title="Chọn ảnh">
            <i class="bi bi-image"></i>
          </button>

          <input id="msg" class="form-control" placeholder="Nhập tin nhắn..." />
          <button id="send" class="btn btn-primary"><i class="bi bi-send"></i></button>
        </div>

        <!-- Preview ảnh -->
        <div id="imagePreview" class="image-preview" style="display: none;">
          <div class="preview-container">
            <img id="previewImg" src="" alt="Preview" />
            <button id="removeImage" class="btn btn-sm btn-danger" type="button">
              <i class="bi bi-x"></i>
            </button>
          </div>
        </div>
      </div>
    </section>
  </div>
</div>

<!-- Hidden form for CSRF token -->
@Html.AntiForgeryToken()

<!-- Upload Progress Indicator -->
<div id="uploadProgress" class="upload-progress">
  <i class="bi bi-cloud-upload me-2"></i>
  <span>Đang upload ảnh...</span>
</div>

<style>
.chat-card {
  height: 80vh;
  display: flex;
  flex-direction: column;
}

.chat-body {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  max-height: calc(80vh - 120px);
  background: #f8f9fa;
}

.msg {
  display: flex;
  margin-bottom: 1rem;
  align-items: flex-end;
}

.msg.me {
  flex-direction: row-reverse;
}

.msg-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 8px;
  background: #e9ecef;
  flex-shrink: 0;
}

.avatar-img {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  object-fit: cover;
}

.msg-content {
  max-width: 70%;
  display: flex;
  flex-direction: column;
}

.msg.me .msg-content {
  align-items: flex-end;
}

.msg-name {
  font-size: 0.8rem;
  color: #6c757d;
  margin-bottom: 4px;
  font-weight: 500;
}

.msg-bubble {
  background: white;
  padding: 8px 12px;
  border-radius: 18px;
  box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  position: relative;
  word-wrap: break-word;
  word-break: break-word;
}

.msg.me .msg-bubble {
  background: #007bff;
  color: white;
}

.msg-text {
  margin: 0;
  line-height: 1.4;
}

.msg-image {
  max-width: 100%;
  max-height: 300px;
  border-radius: 8px;
  margin: 4px 0;
  object-fit: contain;
  display: block;
}

.msg-time {
  font-size: 0.7rem;
  color: #6c757d;
  margin-top: 4px;
  display: flex;
  align-items: center;
  gap: 4px;
}

.msg.me .msg-time {
  color: rgba(255,255,255,0.7);
}

.status {
  display: flex;
  align-items: center;
  gap: 2px;
}

.status-text {
  font-size: 0.65rem;
}

.card-footer {
  background: white;
  border-top: 1px solid #dee2e6;
  padding: 1rem;
  display: flex;
  align-items: center;
  gap: 8px;
  flex-shrink: 0;
}

#msg {
  flex: 1;
  border-radius: 20px;
  border: 1px solid #dee2e6;
  padding: 8px 16px;
  resize: none;
}

#msg:focus {
  border-color: #007bff;
  box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
}

#send {
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

#btnImage {
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.image-preview {
  position: absolute;
  bottom: 100%;
  left: 0;
  right: 0;
  background: white;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 8px;
  margin-bottom: 8px;
}

.preview-container {
  position: relative;
  display: inline-block;
}

.preview-container img {
  max-width: 200px;
  max-height: 150px;
  border-radius: 4px;
}

#removeImage {
  position: absolute;
  top: -8px;
  right: -8px;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.upload-progress {
  position: fixed;
  top: 20px;
  right: 20px;
  background: #007bff;
  color: white;
  padding: 8px 16px;
  border-radius: 20px;
  display: none;
  z-index: 1000;
}

.chat-body::-webkit-scrollbar {
  width: 6px;
}

.chat-body::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.chat-body::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 3px;
}

.chat-body::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* Mobile responsive - removed for now */
</style>

@section Scripts{
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
<script>
// Chat variables  
const meId = "@meId", meName = "@meName", room = "@room";
let currentImageFile = null;

// DOM elements
const hub = new signalR.HubConnectionBuilder().withUrl("/hubs/chat").build();
const list = document.getElementById("messages");
const input = document.getElementById("msg");
const btnSend = document.getElementById("send");
const fileInput = document.getElementById("fileInput");
const btnImage = document.getElementById("btnImage");
const uploadProgress = document.getElementById("uploadProgress");
const imagePreview = document.getElementById("imagePreview");
const previewImg = document.getElementById("previewImg");
const removeImage = document.getElementById("removeImage");

// SignalR event handlers
hub.on("message", m => append(m));
hub.on("dm", m => {
  if (!room.startsWith("dm:")) return;
  const msgRoom = m.room;
  if (msgRoom === room) append(m);
});
hub.on("statusChanged", s => {
  const el = document.querySelector(`.msg[data-id="${s.id}"] .status`);
  if (!el) return;
  const wrap = el;
  if (s.status === "Delivered") {
    wrap.innerHTML = `<i class="bi bi-check2-all"></i><span class="status-text">Đã nhận</span>`;
  } else if (s.status === "Seen") {
    wrap.innerHTML = `<i class="bi bi-check2-all text-primary"></i><span class="status-text">Đã xem</span>`;
  }
});

// Start connection
hub.start().then(() => {
  hub.invoke("JoinRoom", room);
  if (room.startsWith("dm:")) {
    const ids = room.replace("dm:", "").split(":");
    const other = ids[0] === meId ? ids[1] : ids[0];
    hub.invoke("MarkSeen", other);
  }
  // Auto scroll to bottom on load
  setTimeout(() => {
    if (list) list.scrollTop = list.scrollHeight;
  }, 100);
});

// Event handlers
document.querySelectorAll(".dm-open").forEach(a=>{
  a.addEventListener("click", ()=> {
    const to = a.dataset.id;
    const name = a.dataset.name;
    const dmRoom = "dm:" + (meId < to ? meId + ":" + to : to + ":" + meId);
    window.location.href = "@Url.Action("Index")" + "?room=" + encodeURIComponent(dmRoom);
  });
});

btnImage.onclick = () => fileInput.click();
fileInput.addEventListener("change", (e) => {
  if (!fileInput.files || fileInput.files.length === 0) return;
  const file = fileInput.files[0];
  showImagePreview(file);
  fileInput.value = "";
});

btnSend.onclick = async () => {
  const text = input.value.trim();
  const imageFile = currentImageFile;
  if (!text && !imageFile) return;
  
  if (imageFile) {
    await uploadAndSendImage(imageFile, text);
    hideImagePreview();
  } else {
    await sendMessage(text, null);
  }
  input.value = "";
};

input.addEventListener("keydown", async (e) => {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault();
    const text = input.value.trim();
    const imageFile = currentImageFile;
    if (!text && !imageFile) return;
    
    if (imageFile) {
      await uploadAndSendImage(imageFile, text);
      hideImagePreview();
    } else {
      await sendMessage(text, null);
    }
    input.value = "";
  }
});

removeImage.onclick = () => hideImagePreview();

async function sendMessage(text, imageUrl) {
  if (!text && !imageUrl) return;
  
  console.log('📤 Sending:', { text, imageUrl, room });
  
  if (room.startsWith("dm:")) {
    const ids = room.replace("dm:", "").split(":");
    const other = ids[0] === meId ? ids[1] : ids[0];
    await hub.invoke("SendDirect", other, text || null, imageUrl || null);
  } else {
    await hub.invoke("SendToRoom", room, text || null, imageUrl || null);
  }
}

// Khi quay lại tab -> đánh dấu đã xem
document.addEventListener("visibilitychange", () => {
  if (document.visibilityState === "visible" && room.startsWith("dm:")) {
    const ids = room.replace("dm:", "").split(":");
    const other = ids[0] === meId ? ids[1] : ids[0];
    hub.invoke("MarkSeen", other);
  }
});

// Utility functions
function showImagePreview(file) {
  const okTypes = ["image/png", "image/jpeg", "image/gif", "image/webp"];
  if (!okTypes.includes(file.type)) {
    alert("Chỉ cho phép upload ảnh (PNG, JPEG, GIF, WEBP)");
    return;
  }

  const maxSize = 5 * 1024 * 1024; // 5MB
  if (file.size > maxSize) {
    alert("Kích thước file quá lớn. Tối đa 5MB");
    return;
  }

  currentImageFile = file;
  const reader = new FileReader();
  reader.onload = (e) => {
    previewImg.src = e.target.result;
    imagePreview.style.display = "block";
    input.focus();
  };
  reader.readAsDataURL(file);
}

function hideImagePreview() {
  currentImageFile = null;
  imagePreview.style.display = "none";
  previewImg.src = "";
}

async function uploadAndSendImage(file, text = "") {
  const formData = new FormData();
  formData.append("file", file);
  
  const token = document.querySelector('input[name="__RequestVerificationToken"]');
  if (token) formData.append("__RequestVerificationToken", token.value);

  btnImage.disabled = btnSend.disabled = true;
  uploadProgress.style.display = "block";
  
  try {
    const resp = await fetch("@Url.Action("UploadAttachment", "Chat")", {
      method: "POST",
      body: formData,
      headers: { "X-Requested-With": "XMLHttpRequest" }
    });
    
    if (!resp.ok) {
      const errorText = await resp.text();
      throw new Error(errorText || "Upload lỗi");
    }
    
    const data = await resp.json();
    await sendMessage(text, data.url);
  } catch (err) {
    alert(err.message || "Lỗi upload ảnh");
  } finally {
    btnImage.disabled = btnSend.disabled = false;
    uploadProgress.style.display = "none";
  }
}

function append(m) {
  if (!list) return;
  
  const mine = m.senderId === meId;
  const item = document.createElement("div");
  item.className = "msg" + (mine ? " me" : " other");
  item.dataset.id = m.id;

  const avatar = `<div class="msg-avatar">${m.senderAvatar ? `<img src="${m.senderAvatar}" alt="${m.senderName}" class="avatar-img">` : `<i class="bi bi-person-circle"></i>`}</div>`;
  const name = !mine ? `<div class="msg-name">${m.senderName}</div>` : "";
  const textHtml = m.content ? `<div class="msg-text">${m.content}</div>` : "";
  const imgHtml = m.imageUrl ? `<img class="msg-image" src="${m.imageUrl}" alt="image"/>` : "";
  const statusHtml = (mine && room.startsWith("dm:")) ? `<span class="status">${renderStatus(m.status)}</span>` : "";

  if (mine) {
    item.innerHTML = `
      <div class="msg-content">
        ${name}
        <div class="msg-bubble">
          ${textHtml}
          ${imgHtml}
          <div class="msg-time">
            <span class="time">${formatTime(m.createdAt)}</span>
            ${statusHtml}
          </div>
        </div>
      </div>
      ${avatar}
    `;
  } else {
    item.innerHTML = `
      ${avatar}
      <div class="msg-content">
        ${name}
        <div class="msg-bubble">
          ${textHtml}
          ${imgHtml}
          <div class="msg-time">
            <span class="time">${formatTime(m.createdAt)}</span>
          </div>
        </div>
      </div>
    `;
  }
  
  list.appendChild(item);
  list.scrollTop = list.scrollHeight;
}

function renderStatus(status) {
  switch (status || "Sent") {
    case "Delivered": return `<i class="bi bi-check2-all"></i><span class="status-text">Đã nhận</span>`;
    case "Seen": return `<i class="bi bi-check2-all text-primary"></i><span class="status-text">Đã xem</span>`;
    default: return `<i class="bi bi-check2"></i><span class="status-text">Đã gửi</span>`;
  }
}

function formatTime(iso) {
  try { 
    return new Date(iso).toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'}); 
  } catch { 
    return ""; 
  }
}

// Xử lý paste hình ảnh
input.addEventListener("paste", (e) => {
  const items = e.clipboardData?.items;
  if (!items) return;
  
  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    if (item.type.startsWith("image/")) {
      e.preventDefault();
      const file = item.getAsFile();
      if (file) {
        showImagePreview(file);
      }
      break;
    }
  }
});

</script>
}
